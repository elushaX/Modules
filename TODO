
ALL:
  Gradually introduce STL into the project (replace own classes or add seamless interface and conversions into STL)

  Remove BaseModule and Connection modules
  remove archiver and add boost serialization
  Bring windows old window to graphics

  Check Warnings
  Make all modules stable with tests

Modules:
  Remove all static variable into module's data

Algorithms:
  Implement heap sort, quick sort, bucket sort, counting sort, (radix sort?)
  Implement order statistics.

Containers:
  Add variant size buffer
  Buffer add resize function
  Buffer improvements
  Add check copy times

Storage:
  Reconsider
  Finish networking
  Enable preloads

Objects:
  Warnings
  Memory leaks
  Compile-time error handling
  Debug information support
  Run-time error handling
  Refactors
  Optimizations

  features:
    add debug line information into bytecode
    implement Alloc Size queries

  enhance:
    use anonymous namespaces for object static methods
    remove obj_ref_count macro
    fix all clang-tidy notices
    replace all strings with const string ref
    replace all type usages with typedefs
    remove tp::
    rename classes

Language:
	Grammar:
		Store all RE Grammar API nodes in one buffer

	rename Language module to FormalLanguage
	Merge parser and tokenizer module into grammar module

	Define grammars
	Implement automations
	Implement LL parsing using hardcoded rules in the code
	Implement save and loading of automatas
	Using LL parsing define grammar for

	Make two grammars Regular and Context-free
	For each grammar make grammar rules parser, example sentence generation and sentence parsing
	Make automations itself a universal tool - NFA DFA conversions

Widgets:
    Add tree structure interface to simplify code
    Add shortcuts
    Config cache may be static

LibraryViewer:
    artworks
    how to easily add more songs?
    seeker
    song idx
    non-existing highlight
    prev next
    remove debug gui
    queue & repeat & shuffle...
    new database with history

Math:
	FFT

3DScene:
    implement and use in raytracer on raster engines

3DEditor:
    Features:
        add gizmos
        use 3D scene
        include raytracer engine

RayTracer:
	Features:
	    iodn
		Normals flag
		Material, Normals, per trig info

	Quality:
		Render eq
		Lenses
		Exposure

	Efficiency:
		Casting Accelerators
		MIS (DMIS CMIS)
		Important sampling
		Threading

TextEditor:
  Restore
